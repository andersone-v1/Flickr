{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red178\green24\blue137;\red24\green23\blue27;\red228\green152\blue68;
\red93\green216\blue255;\red65\green161\blue192;\red68\green222\blue175;\red29\green190\blue253;\red120\green109\blue196;
\red219\green44\blue56;}
{\*\expandedcolortbl;;\csgenericrgb\c69800\c9500\c53600;\csgenericrgb\c9220\c9172\c10609;\csgenericrgb\c89523\c59797\c26541;
\csgenericrgb\c36295\c84643\c99897;\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c26667\c87059\c68628\c92000;\csgenericrgb\c11373\c74510\c99216\c91910;\csgenericrgb\c46900\c42600\c77000;
\csgenericrgb\c85900\c17100\c21900;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12780\viewh9760\viewkind0
\deftab642
\pard\tx642\pardeftab642\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 class\cf4  \cf5 PhotoSizeManager\cf4  \{\
\
    \cf2 class\cf4  \cf2 func\cf4  \cf6 getSize\cf4 (photos: [\cf7 PhotoModel\cf4 ], completion: \cf2 @escaping\cf4  (\cf2 _\cf4  isSuccess: \cf8 Bool\cf4 ) -> \cf8 Void\cf4 ) \{\
\
        \cf2 var\cf4  index = \cf9 0\cf4 \
\
        \cf2 for\cf4  photo \cf2 in\cf4  photos \{\
\
            \cf7 APIWrapper\cf4 .\cf7 getSizes\cf4 (forPhotoID: photo.\cf7 id\cf4 , success: \{ (response) \cf2 in\cf4 \
                \cf2 let\cf4  jsonData = \cf7 JSON\cf4 (response)\
\
                \cf2 let\cf4  sizes = jsonData[\cf10 "sizes"\cf4 ][\cf10 "size"\cf4 ][\cf9 4\cf4 ].\cf7 dictionaryValue\cf4 \
                \cf2 guard\cf4  \cf2 let\cf4  width = sizes[\cf10 "width"\cf4 ]?.\cf7 doubleValue\cf4  \cf2 else\cf4  \{ \cf2 return\cf4  \}\
                \cf2 guard\cf4  \cf2 let\cf4  height = sizes[\cf10 "height"\cf4 ]?.\cf7 doubleValue\cf4  \cf2 else\cf4  \{ \cf2 return\cf4  \}\
\
                \cf2 let\cf4  size = \cf8 CGSize\cf4 (width: width, height: height)\
                photo.size = size\
\
                \cf2 if\cf4  index \cf8 ==\cf4  photos.\cf8 count\cf4  \cf8 -\cf4  \cf9 1\cf4  \{\
                    completion(\cf2 true\cf4 )\
                \} \cf2 else\cf4  \{\
                    index \cf8 +=\cf4  \cf9 1\cf4 \
                \}\
            \}) \{ (error) \cf2 in\cf4 \
                completion(\cf2 false\cf4 )\
            \}\
        \}\
    \}\
\}\
\
\
\cf2 class\cf4  \cf2 func\cf4  \cf6 getSizes\cf4 (forPhotoID id: \cf8 String\cf4 , success: \cf2 @escaping\cf4  (\cf2 _\cf4  json: \cf2 Any\cf4 ) -> \cf8 Void\cf4 , failure: \cf2 @escaping\cf4  (\cf2 _\cf4  error: \cf8 String\cf4 ?) -> \cf8 Void\cf4 ) \{\
        \
        \cf2 let\cf4  url = \cf7 Const\cf4 .\cf7 API_const\cf4 .\cf7 baseURL\cf4 \
        \cf2 let\cf4  params: [\cf8 String\cf4 : \cf8 AnyHashable\cf4 ] = [\cf10 "method"\cf4 : \cf10 "flickr.photos.getSizes"\cf4 ,\
                                     \cf10 "api_key"\cf4 : \cf7 Const\cf4 .\cf7 API_const\cf4 .\cf7 token\cf4 ,\
                                     \cf10 "photo_id"\cf4 : id,\
                                     \cf10 "format"\cf4 : \cf10 "json"\cf4 ,\
                                     \cf10 "nojsoncallback"\cf4 : \cf9 1\cf4 ]\
        \
        \cf2 let\cf4  request: \cf8 URLRequest\cf4  = \cf7 APIConf\cf4 .\cf7 createRequest\cf4 (withURL: url, andParams: params)\
        \cf2 let\cf4  dataTask = \cf8 URLSession\cf4 .\cf8 shared\cf4 .\cf8 dataTask\cf4 (with: request) \{ data, response, error \cf2 in\cf4 \
            \cf7 APIConf\cf4 .\cf7 generalComplitionHandler\cf4 (withData: data, withError: error, success: success, failure: failure)\
        \}\
        dataTask.\cf8 resume\cf4 ()\
    \}}